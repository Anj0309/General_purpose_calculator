
calci.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001d64  08001d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d98  08001d98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d98  08001d98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d98  08001d98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d9c  08001d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  08001dac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001dac  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003166  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011fa  00000000  00000000  000231de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000480  00000000  00000000  000243d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000339  00000000  00000000  00024858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a05  00000000  00000000  00024b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c92  00000000  00000000  0003a596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079bb3  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f68  00000000  00000000  000b9ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000bad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d4c 	.word	0x08001d4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d4c 	.word	0x08001d4c

0800014c <key_map>:
	  lcd_clear();
	  lcd_set_cursor(0,0);
	  lcd_send_data('0');
}
char key_map()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	char key_data = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	  /*R1 mapping*/
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000156:	2201      	movs	r2, #1
 8000158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800015c:	48be      	ldr	r0, [pc, #760]	; (8000458 <key_map+0x30c>)
 800015e:	f001 f9a2 	bl	80014a6 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1)
 8000162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000166:	48bd      	ldr	r0, [pc, #756]	; (800045c <key_map+0x310>)
 8000168:	f001 f986 	bl	8001478 <HAL_GPIO_ReadPin>
 800016c:	4603      	mov	r3, r0
 800016e:	2b01      	cmp	r3, #1
 8000170:	d10e      	bne.n	8000190 <key_map+0x44>
	  {
		  while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1);
 8000172:	bf00      	nop
 8000174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000178:	48b8      	ldr	r0, [pc, #736]	; (800045c <key_map+0x310>)
 800017a:	f001 f97d 	bl	8001478 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	d0f7      	beq.n	8000174 <key_map+0x28>
		  key_data = '1';
 8000184:	2331      	movs	r3, #49	; 0x31
 8000186:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000188:	4bb5      	ldr	r3, [pc, #724]	; (8000460 <key_map+0x314>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e043      	b.n	8000218 <key_map+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1)
 8000190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000194:	48b1      	ldr	r0, [pc, #708]	; (800045c <key_map+0x310>)
 8000196:	f001 f96f 	bl	8001478 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10e      	bne.n	80001be <key_map+0x72>
	  {
		  while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1);
 80001a0:	bf00      	nop
 80001a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a6:	48ad      	ldr	r0, [pc, #692]	; (800045c <key_map+0x310>)
 80001a8:	f001 f966 	bl	8001478 <HAL_GPIO_ReadPin>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d0f7      	beq.n	80001a2 <key_map+0x56>
		  key_data = '2';
 80001b2:	2332      	movs	r3, #50	; 0x32
 80001b4:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80001b6:	4baa      	ldr	r3, [pc, #680]	; (8000460 <key_map+0x314>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
 80001bc:	e02c      	b.n	8000218 <key_map+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1)
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	48a6      	ldr	r0, [pc, #664]	; (800045c <key_map+0x310>)
 80001c4:	f001 f958 	bl	8001478 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d10e      	bne.n	80001ec <key_map+0xa0>
	  {
		  while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1);
 80001ce:	bf00      	nop
 80001d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d4:	48a1      	ldr	r0, [pc, #644]	; (800045c <key_map+0x310>)
 80001d6:	f001 f94f 	bl	8001478 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d0f7      	beq.n	80001d0 <key_map+0x84>
		  key_data = '3';
 80001e0:	2333      	movs	r3, #51	; 0x33
 80001e2:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80001e4:	4b9e      	ldr	r3, [pc, #632]	; (8000460 <key_map+0x314>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
 80001ea:	e015      	b.n	8000218 <key_map+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1)
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	489a      	ldr	r0, [pc, #616]	; (800045c <key_map+0x310>)
 80001f2:	f001 f941 	bl	8001478 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d10d      	bne.n	8000218 <key_map+0xcc>
	  {
		  while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1);
 80001fc:	bf00      	nop
 80001fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000202:	4896      	ldr	r0, [pc, #600]	; (800045c <key_map+0x310>)
 8000204:	f001 f938 	bl	8001478 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b01      	cmp	r3, #1
 800020c:	d0f7      	beq.n	80001fe <key_map+0xb2>
		  key_data = '/';
 800020e:	232f      	movs	r3, #47	; 0x2f
 8000210:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000212:	4b93      	ldr	r3, [pc, #588]	; (8000460 <key_map+0x314>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 0);
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021e:	488e      	ldr	r0, [pc, #568]	; (8000458 <key_map+0x30c>)
 8000220:	f001 f941 	bl	80014a6 <HAL_GPIO_WritePin>

	  /*R2 mapping*/
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022a:	488b      	ldr	r0, [pc, #556]	; (8000458 <key_map+0x30c>)
 800022c:	f001 f93b 	bl	80014a6 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1)
 8000230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000234:	4889      	ldr	r0, [pc, #548]	; (800045c <key_map+0x310>)
 8000236:	f001 f91f 	bl	8001478 <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	2b01      	cmp	r3, #1
 800023e:	d10e      	bne.n	800025e <key_map+0x112>
	  {
		  while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1);
 8000240:	bf00      	nop
 8000242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000246:	4885      	ldr	r0, [pc, #532]	; (800045c <key_map+0x310>)
 8000248:	f001 f916 	bl	8001478 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b01      	cmp	r3, #1
 8000250:	d0f7      	beq.n	8000242 <key_map+0xf6>
		  key_data = '4';
 8000252:	2334      	movs	r3, #52	; 0x34
 8000254:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000256:	4b82      	ldr	r3, [pc, #520]	; (8000460 <key_map+0x314>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	e043      	b.n	80002e6 <key_map+0x19a>
	  }
	  else if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1)
 800025e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000262:	487e      	ldr	r0, [pc, #504]	; (800045c <key_map+0x310>)
 8000264:	f001 f908 	bl	8001478 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d10e      	bne.n	800028c <key_map+0x140>
	  {
		  while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1);
 800026e:	bf00      	nop
 8000270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000274:	4879      	ldr	r0, [pc, #484]	; (800045c <key_map+0x310>)
 8000276:	f001 f8ff 	bl	8001478 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b01      	cmp	r3, #1
 800027e:	d0f7      	beq.n	8000270 <key_map+0x124>
		  key_data = '5';
 8000280:	2335      	movs	r3, #53	; 0x35
 8000282:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000284:	4b76      	ldr	r3, [pc, #472]	; (8000460 <key_map+0x314>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e02c      	b.n	80002e6 <key_map+0x19a>
	  }
	  else if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1)
 800028c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000290:	4872      	ldr	r0, [pc, #456]	; (800045c <key_map+0x310>)
 8000292:	f001 f8f1 	bl	8001478 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d10e      	bne.n	80002ba <key_map+0x16e>
	  {
		  while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1);
 800029c:	bf00      	nop
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	486e      	ldr	r0, [pc, #440]	; (800045c <key_map+0x310>)
 80002a4:	f001 f8e8 	bl	8001478 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d0f7      	beq.n	800029e <key_map+0x152>
		  key_data = '6';
 80002ae:	2336      	movs	r3, #54	; 0x36
 80002b0:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80002b2:	4b6b      	ldr	r3, [pc, #428]	; (8000460 <key_map+0x314>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e015      	b.n	80002e6 <key_map+0x19a>
	  }
	  else if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1)
 80002ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002be:	4867      	ldr	r0, [pc, #412]	; (800045c <key_map+0x310>)
 80002c0:	f001 f8da 	bl	8001478 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d10d      	bne.n	80002e6 <key_map+0x19a>
	  {
		  while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1);
 80002ca:	bf00      	nop
 80002cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d0:	4862      	ldr	r0, [pc, #392]	; (800045c <key_map+0x310>)
 80002d2:	f001 f8d1 	bl	8001478 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d0f7      	beq.n	80002cc <key_map+0x180>
		  key_data = 'x';
 80002dc:	2378      	movs	r3, #120	; 0x78
 80002de:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80002e0:	4b5f      	ldr	r3, [pc, #380]	; (8000460 <key_map+0x314>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ec:	485a      	ldr	r0, [pc, #360]	; (8000458 <key_map+0x30c>)
 80002ee:	f001 f8da 	bl	80014a6 <HAL_GPIO_WritePin>

	  /*R3 mapping*/
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	4857      	ldr	r0, [pc, #348]	; (8000458 <key_map+0x30c>)
 80002fa:	f001 f8d4 	bl	80014a6 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1)
 80002fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000302:	4856      	ldr	r0, [pc, #344]	; (800045c <key_map+0x310>)
 8000304:	f001 f8b8 	bl	8001478 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	2b01      	cmp	r3, #1
 800030c:	d10e      	bne.n	800032c <key_map+0x1e0>
	  {
		  while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1);
 800030e:	bf00      	nop
 8000310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000314:	4851      	ldr	r0, [pc, #324]	; (800045c <key_map+0x310>)
 8000316:	f001 f8af 	bl	8001478 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	d0f7      	beq.n	8000310 <key_map+0x1c4>
		  key_data = '7';
 8000320:	2337      	movs	r3, #55	; 0x37
 8000322:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000324:	4b4e      	ldr	r3, [pc, #312]	; (8000460 <key_map+0x314>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e043      	b.n	80003b4 <key_map+0x268>
	  }
	  else if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1)
 800032c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000330:	484a      	ldr	r0, [pc, #296]	; (800045c <key_map+0x310>)
 8000332:	f001 f8a1 	bl	8001478 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	2b01      	cmp	r3, #1
 800033a:	d10e      	bne.n	800035a <key_map+0x20e>
	  {
		  while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1);
 800033c:	bf00      	nop
 800033e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000342:	4846      	ldr	r0, [pc, #280]	; (800045c <key_map+0x310>)
 8000344:	f001 f898 	bl	8001478 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b01      	cmp	r3, #1
 800034c:	d0f7      	beq.n	800033e <key_map+0x1f2>
		  key_data = '8';
 800034e:	2338      	movs	r3, #56	; 0x38
 8000350:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000352:	4b43      	ldr	r3, [pc, #268]	; (8000460 <key_map+0x314>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e02c      	b.n	80003b4 <key_map+0x268>
	  }
	  else if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1)
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	483f      	ldr	r0, [pc, #252]	; (800045c <key_map+0x310>)
 8000360:	f001 f88a 	bl	8001478 <HAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	2b01      	cmp	r3, #1
 8000368:	d10e      	bne.n	8000388 <key_map+0x23c>
	  {
		  while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1);
 800036a:	bf00      	nop
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	483a      	ldr	r0, [pc, #232]	; (800045c <key_map+0x310>)
 8000372:	f001 f881 	bl	8001478 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b01      	cmp	r3, #1
 800037a:	d0f7      	beq.n	800036c <key_map+0x220>
		  key_data = '9';
 800037c:	2339      	movs	r3, #57	; 0x39
 800037e:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000380:	4b37      	ldr	r3, [pc, #220]	; (8000460 <key_map+0x314>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	e015      	b.n	80003b4 <key_map+0x268>
	  }
	  else if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1)
 8000388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038c:	4833      	ldr	r0, [pc, #204]	; (800045c <key_map+0x310>)
 800038e:	f001 f873 	bl	8001478 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	d10d      	bne.n	80003b4 <key_map+0x268>
	  {
		  while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1);
 8000398:	bf00      	nop
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	482f      	ldr	r0, [pc, #188]	; (800045c <key_map+0x310>)
 80003a0:	f001 f86a 	bl	8001478 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d0f7      	beq.n	800039a <key_map+0x24e>
		  key_data = '-';
 80003aa:	232d      	movs	r3, #45	; 0x2d
 80003ac:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80003ae:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <key_map+0x314>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ba:	4827      	ldr	r0, [pc, #156]	; (8000458 <key_map+0x30c>)
 80003bc:	f001 f873 	bl	80014a6 <HAL_GPIO_WritePin>

	  /*R4 mapping*/
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	4824      	ldr	r0, [pc, #144]	; (8000458 <key_map+0x30c>)
 80003c8:	f001 f86d 	bl	80014a6 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1)
 80003cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d0:	4822      	ldr	r0, [pc, #136]	; (800045c <key_map+0x310>)
 80003d2:	f001 f851 	bl	8001478 <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d10e      	bne.n	80003fa <key_map+0x2ae>
	  {
		  while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==1);
 80003dc:	bf00      	nop
 80003de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e2:	481e      	ldr	r0, [pc, #120]	; (800045c <key_map+0x310>)
 80003e4:	f001 f848 	bl	8001478 <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d0f7      	beq.n	80003de <key_map+0x292>
		  key_data = 'C';
 80003ee:	2343      	movs	r3, #67	; 0x43
 80003f0:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <key_map+0x314>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e04a      	b.n	8000490 <key_map+0x344>
	  }
	  else if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1)
 80003fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003fe:	4817      	ldr	r0, [pc, #92]	; (800045c <key_map+0x310>)
 8000400:	f001 f83a 	bl	8001478 <HAL_GPIO_ReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	2b01      	cmp	r3, #1
 8000408:	d10e      	bne.n	8000428 <key_map+0x2dc>
	  {
		  while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==1);
 800040a:	bf00      	nop
 800040c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000410:	4812      	ldr	r0, [pc, #72]	; (800045c <key_map+0x310>)
 8000412:	f001 f831 	bl	8001478 <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b01      	cmp	r3, #1
 800041a:	d0f7      	beq.n	800040c <key_map+0x2c0>
		  key_data = '0';
 800041c:	2330      	movs	r3, #48	; 0x30
 800041e:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <key_map+0x314>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	e033      	b.n	8000490 <key_map+0x344>
	  }
	  else if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1)
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <key_map+0x310>)
 800042e:	f001 f823 	bl	8001478 <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b01      	cmp	r3, #1
 8000436:	d115      	bne.n	8000464 <key_map+0x318>
	  {
		  while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==1);
 8000438:	bf00      	nop
 800043a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043e:	4807      	ldr	r0, [pc, #28]	; (800045c <key_map+0x310>)
 8000440:	f001 f81a 	bl	8001478 <HAL_GPIO_ReadPin>
 8000444:	4603      	mov	r3, r0
 8000446:	2b01      	cmp	r3, #1
 8000448:	d0f7      	beq.n	800043a <key_map+0x2ee>
		  key_data = '=';
 800044a:	233d      	movs	r3, #61	; 0x3d
 800044c:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <key_map+0x314>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e01c      	b.n	8000490 <key_map+0x344>
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00
 8000460:	20000028 	.word	0x20000028
	  }
	  else if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1)
 8000464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <key_map+0x35c>)
 800046a:	f001 f805 	bl	8001478 <HAL_GPIO_ReadPin>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d10d      	bne.n	8000490 <key_map+0x344>
	  {
		  while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)==1);
 8000474:	bf00      	nop
 8000476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047a:	480b      	ldr	r0, [pc, #44]	; (80004a8 <key_map+0x35c>)
 800047c:	f000 fffc 	bl	8001478 <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	2b01      	cmp	r3, #1
 8000484:	d0f7      	beq.n	8000476 <key_map+0x32a>
		  key_data = '+';
 8000486:	232b      	movs	r3, #43	; 0x2b
 8000488:	71fb      	strb	r3, [r7, #7]
		  status.data_available = 1;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <key_map+0x360>)
 800048c:	2201      	movs	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <key_map+0x364>)
 8000498:	f001 f805 	bl	80014a6 <HAL_GPIO_WritePin>

	  return key_data;
 800049c:	79fb      	ldrb	r3, [r7, #7]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	20000028 	.word	0x20000028
 80004b0:	40010800 	.word	0x40010800

080004b4 <perform_calculation>:

void perform_calculation( uint32_t D1, uint32_t D2, char op)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	4613      	mov	r3, r2
 80004c0:	71fb      	strb	r3, [r7, #7]
	switch (op)
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b78      	cmp	r3, #120	; 0x78
 80004c6:	d026      	beq.n	8000516 <perform_calculation+0x62>
 80004c8:	2b78      	cmp	r3, #120	; 0x78
 80004ca:	dc32      	bgt.n	8000532 <perform_calculation+0x7e>
 80004cc:	2b2f      	cmp	r3, #47	; 0x2f
 80004ce:	d029      	beq.n	8000524 <perform_calculation+0x70>
 80004d0:	2b2f      	cmp	r3, #47	; 0x2f
 80004d2:	dc2e      	bgt.n	8000532 <perform_calculation+0x7e>
 80004d4:	2b2b      	cmp	r3, #43	; 0x2b
 80004d6:	d002      	beq.n	80004de <perform_calculation+0x2a>
 80004d8:	2b2d      	cmp	r3, #45	; 0x2d
 80004da:	d006      	beq.n	80004ea <perform_calculation+0x36>
 80004dc:	e029      	b.n	8000532 <perform_calculation+0x7e>
	{
		case '+':
			result = D1+D2;
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <perform_calculation+0x90>)
 80004e6:	6013      	str	r3, [r2, #0]
			break;
 80004e8:	e027      	b.n	800053a <perform_calculation+0x86>
		case '-':
			if(D2>D1)
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d908      	bls.n	8000504 <perform_calculation+0x50>
			{
				result = D2-D1;
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <perform_calculation+0x90>)
 80004fa:	6013      	str	r3, [r2, #0]
				status.negative_result = 1;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <perform_calculation+0x94>)
 80004fe:	2201      	movs	r2, #1
 8000500:	70da      	strb	r2, [r3, #3]
			else
			{
				result = D1 - D2;
				status.negative_result = 0;
			}
			break;
 8000502:	e01a      	b.n	800053a <perform_calculation+0x86>
				result = D1 - D2;
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <perform_calculation+0x90>)
 800050c:	6013      	str	r3, [r2, #0]
				status.negative_result = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <perform_calculation+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	70da      	strb	r2, [r3, #3]
			break;
 8000514:	e011      	b.n	800053a <perform_calculation+0x86>
		case 'x':

			result = D1*D2;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	4a09      	ldr	r2, [pc, #36]	; (8000544 <perform_calculation+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
			break;
 8000522:	e00a      	b.n	800053a <perform_calculation+0x86>
		case '/':
			result = D1/D2;
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <perform_calculation+0x90>)
 800052e:	6013      	str	r3, [r2, #0]
			break;
 8000530:	e003      	b.n	800053a <perform_calculation+0x86>
		default:
			lcd_Send_String("SYNTAX ERROR");
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <perform_calculation+0x98>)
 8000534:	f000 facd 	bl	8000ad2 <lcd_Send_String>
			break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000038 	.word	0x20000038
 8000548:	20000028 	.word	0x20000028
 800054c:	08001d64 	.word	0x08001d64

08000550 <display_number>:

void display_number(uint32_t num)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	; 0x38
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	int temp =0;
 8000558:	2300      	movs	r3, #0
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
	int arr[10];
	while(num!=0)
 800055c:	e018      	b.n	8000590 <display_number+0x40>
	{
		arr[temp] = num%10;
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <display_number+0x88>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	3338      	adds	r3, #56	; 0x38
 8000578:	443b      	add	r3, r7
 800057a:	f843 2c2c 	str.w	r2, [r3, #-44]
		num = num/10;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <display_number+0x88>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	607b      	str	r3, [r7, #4]
		temp++;
 800058a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800058c:	3301      	adds	r3, #1
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
	while(num!=0)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1e3      	bne.n	800055e <display_number+0xe>
	}
	temp--;
 8000596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000598:	3b01      	subs	r3, #1
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
	if(status.negative_result)
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <display_number+0x8c>)
 800059e:	78db      	ldrb	r3, [r3, #3]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d010      	beq.n	80005c6 <display_number+0x76>
		lcd_send_data('-');
 80005a4:	202d      	movs	r0, #45	; 0x2d
 80005a6:	f000 fa3f 	bl	8000a28 <lcd_send_data>

	while(temp>=0)
 80005aa:	e00c      	b.n	80005c6 <display_number+0x76>
	{
		lcd_send_data(arr[temp]+'0');
 80005ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	3338      	adds	r3, #56	; 0x38
 80005b2:	443b      	add	r3, r7
 80005b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80005b8:	3330      	adds	r3, #48	; 0x30
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fa34 	bl	8000a28 <lcd_send_data>
		temp--;
 80005c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c2:	3b01      	subs	r3, #1
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
	while(temp>=0)
 80005c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	daef      	bge.n	80005ac <display_number+0x5c>
	}

}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3738      	adds	r7, #56	; 0x38
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	20000028 	.word	0x20000028

080005e0 <check_data>:
void check_data(char data)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	status.data_available = 0 ;
 80005ea:	4ba1      	ldr	r3, [pc, #644]	; (8000870 <check_data+0x290>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	if(data>='0' && data<='9')
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b2f      	cmp	r3, #47	; 0x2f
 80005f4:	d920      	bls.n	8000638 <check_data+0x58>
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b39      	cmp	r3, #57	; 0x39
 80005fa:	d81d      	bhi.n	8000638 <check_data+0x58>
	{
		if( status.input2 == 1)
 80005fc:	4b9c      	ldr	r3, [pc, #624]	; (8000870 <check_data+0x290>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <check_data+0x3e>
			second_input = (second_input*10)+ (data - 0x30);
 8000604:	4b9b      	ldr	r3, [pc, #620]	; (8000874 <check_data+0x294>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	461a      	mov	r2, r3
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4413      	add	r3, r2
 8000616:	3b30      	subs	r3, #48	; 0x30
 8000618:	4a96      	ldr	r2, [pc, #600]	; (8000874 <check_data+0x294>)
 800061a:	6013      	str	r3, [r2, #0]
		if( status.input2 == 1)
 800061c:	e124      	b.n	8000868 <check_data+0x288>
		else
			first_input = (first_input*10)+ (data - 0x30) ;
 800061e:	4b96      	ldr	r3, [pc, #600]	; (8000878 <check_data+0x298>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	461a      	mov	r2, r3
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4413      	add	r3, r2
 8000630:	3b30      	subs	r3, #48	; 0x30
 8000632:	4a91      	ldr	r2, [pc, #580]	; (8000878 <check_data+0x298>)
 8000634:	6013      	str	r3, [r2, #0]
		if( status.input2 == 1)
 8000636:	e117      	b.n	8000868 <check_data+0x288>

	}

	else
	{
		switch (data)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b43      	cmp	r3, #67	; 0x43
 800063c:	dc3c      	bgt.n	80006b8 <check_data+0xd8>
 800063e:	2b2b      	cmp	r3, #43	; 0x2b
 8000640:	f2c0 810f 	blt.w	8000862 <check_data+0x282>
 8000644:	3b2b      	subs	r3, #43	; 0x2b
 8000646:	2b18      	cmp	r3, #24
 8000648:	f200 810b 	bhi.w	8000862 <check_data+0x282>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <check_data+0x74>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	080006bf 	.word	0x080006bf
 8000658:	08000863 	.word	0x08000863
 800065c:	08000701 	.word	0x08000701
 8000660:	08000863 	.word	0x08000863
 8000664:	08000785 	.word	0x08000785
 8000668:	08000863 	.word	0x08000863
 800066c:	08000863 	.word	0x08000863
 8000670:	08000863 	.word	0x08000863
 8000674:	08000863 	.word	0x08000863
 8000678:	08000863 	.word	0x08000863
 800067c:	08000863 	.word	0x08000863
 8000680:	08000863 	.word	0x08000863
 8000684:	08000863 	.word	0x08000863
 8000688:	08000863 	.word	0x08000863
 800068c:	08000863 	.word	0x08000863
 8000690:	08000863 	.word	0x08000863
 8000694:	08000863 	.word	0x08000863
 8000698:	08000863 	.word	0x08000863
 800069c:	080007c7 	.word	0x080007c7
 80006a0:	08000863 	.word	0x08000863
 80006a4:	08000863 	.word	0x08000863
 80006a8:	08000863 	.word	0x08000863
 80006ac:	08000863 	.word	0x08000863
 80006b0:	08000863 	.word	0x08000863
 80006b4:	08000803 	.word	0x08000803
 80006b8:	2b78      	cmp	r3, #120	; 0x78
 80006ba:	d042      	beq.n	8000742 <check_data+0x162>
						first_input = first_input/10;
				}
				break;

			default:
				break;
 80006bc:	e0d1      	b.n	8000862 <check_data+0x282>
				if(status.input2)
 80006be:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <check_data+0x290>)
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d015      	beq.n	80006f2 <check_data+0x112>
					perform_calculation(first_input, second_input, operator);
 80006c6:	4b6c      	ldr	r3, [pc, #432]	; (8000878 <check_data+0x298>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a6a      	ldr	r2, [pc, #424]	; (8000874 <check_data+0x294>)
 80006cc:	6811      	ldr	r1, [r2, #0]
 80006ce:	4a6b      	ldr	r2, [pc, #428]	; (800087c <check_data+0x29c>)
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff feee 	bl	80004b4 <perform_calculation>
					first_input = result;
 80006d8:	4b69      	ldr	r3, [pc, #420]	; (8000880 <check_data+0x2a0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a66      	ldr	r2, [pc, #408]	; (8000878 <check_data+0x298>)
 80006de:	6013      	str	r3, [r2, #0]
					second_input = 0;
 80006e0:	4b64      	ldr	r3, [pc, #400]	; (8000874 <check_data+0x294>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
					lcd_clear();
 80006e6:	f000 f9ed 	bl	8000ac4 <lcd_clear>
					operator = data;
 80006ea:	4a64      	ldr	r2, [pc, #400]	; (800087c <check_data+0x29c>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	7013      	strb	r3, [r2, #0]
				break;
 80006f0:	e0ba      	b.n	8000868 <check_data+0x288>
					status.input2 = 1;
 80006f2:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <check_data+0x290>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	705a      	strb	r2, [r3, #1]
					operator = data;
 80006f8:	4a60      	ldr	r2, [pc, #384]	; (800087c <check_data+0x29c>)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	7013      	strb	r3, [r2, #0]
				break;
 80006fe:	e0b3      	b.n	8000868 <check_data+0x288>
				if(status.input2)
 8000700:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <check_data+0x290>)
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d015      	beq.n	8000734 <check_data+0x154>
					perform_calculation(first_input, second_input, operator);
 8000708:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <check_data+0x298>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a59      	ldr	r2, [pc, #356]	; (8000874 <check_data+0x294>)
 800070e:	6811      	ldr	r1, [r2, #0]
 8000710:	4a5a      	ldr	r2, [pc, #360]	; (800087c <check_data+0x29c>)
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fecd 	bl	80004b4 <perform_calculation>
					first_input = result;
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <check_data+0x2a0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a56      	ldr	r2, [pc, #344]	; (8000878 <check_data+0x298>)
 8000720:	6013      	str	r3, [r2, #0]
					second_input = 0;
 8000722:	4b54      	ldr	r3, [pc, #336]	; (8000874 <check_data+0x294>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
					lcd_clear();
 8000728:	f000 f9cc 	bl	8000ac4 <lcd_clear>
					operator = data;
 800072c:	4a53      	ldr	r2, [pc, #332]	; (800087c <check_data+0x29c>)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	7013      	strb	r3, [r2, #0]
				break;
 8000732:	e099      	b.n	8000868 <check_data+0x288>
					status.input2 = 1;
 8000734:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <check_data+0x290>)
 8000736:	2201      	movs	r2, #1
 8000738:	705a      	strb	r2, [r3, #1]
					operator = data;
 800073a:	4a50      	ldr	r2, [pc, #320]	; (800087c <check_data+0x29c>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	7013      	strb	r3, [r2, #0]
				break;
 8000740:	e092      	b.n	8000868 <check_data+0x288>
				if(status.input2)
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <check_data+0x290>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d015      	beq.n	8000776 <check_data+0x196>
					perform_calculation(first_input, second_input, operator);
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <check_data+0x298>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a49      	ldr	r2, [pc, #292]	; (8000874 <check_data+0x294>)
 8000750:	6811      	ldr	r1, [r2, #0]
 8000752:	4a4a      	ldr	r2, [pc, #296]	; (800087c <check_data+0x29c>)
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff feac 	bl	80004b4 <perform_calculation>
					first_input = result;
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <check_data+0x2a0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a45      	ldr	r2, [pc, #276]	; (8000878 <check_data+0x298>)
 8000762:	6013      	str	r3, [r2, #0]
					second_input = 0;
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <check_data+0x294>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
					lcd_clear();
 800076a:	f000 f9ab 	bl	8000ac4 <lcd_clear>
					operator = data;
 800076e:	4a43      	ldr	r2, [pc, #268]	; (800087c <check_data+0x29c>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	7013      	strb	r3, [r2, #0]
				break;
 8000774:	e078      	b.n	8000868 <check_data+0x288>
					status.input2 = 1;
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <check_data+0x290>)
 8000778:	2201      	movs	r2, #1
 800077a:	705a      	strb	r2, [r3, #1]
					operator = data;
 800077c:	4a3f      	ldr	r2, [pc, #252]	; (800087c <check_data+0x29c>)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	7013      	strb	r3, [r2, #0]
				break;
 8000782:	e071      	b.n	8000868 <check_data+0x288>
				if(status.input2)
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <check_data+0x290>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d015      	beq.n	80007b8 <check_data+0x1d8>
					perform_calculation(first_input, second_input, operator);
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <check_data+0x298>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <check_data+0x294>)
 8000792:	6811      	ldr	r1, [r2, #0]
 8000794:	4a39      	ldr	r2, [pc, #228]	; (800087c <check_data+0x29c>)
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fe8b 	bl	80004b4 <perform_calculation>
					first_input = result;
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <check_data+0x2a0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a35      	ldr	r2, [pc, #212]	; (8000878 <check_data+0x298>)
 80007a4:	6013      	str	r3, [r2, #0]
					second_input = 0;
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <check_data+0x294>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
					lcd_clear();
 80007ac:	f000 f98a 	bl	8000ac4 <lcd_clear>
					operator = data;
 80007b0:	4a32      	ldr	r2, [pc, #200]	; (800087c <check_data+0x29c>)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	7013      	strb	r3, [r2, #0]
				break;
 80007b6:	e057      	b.n	8000868 <check_data+0x288>
					status.input2 = 1;
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <check_data+0x290>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	705a      	strb	r2, [r3, #1]
					operator = data;
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <check_data+0x29c>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	7013      	strb	r3, [r2, #0]
				break;
 80007c4:	e050      	b.n	8000868 <check_data+0x288>
				if(first_input == 0)
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <check_data+0x298>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d109      	bne.n	80007e2 <check_data+0x202>
					lcd_clear();
 80007ce:	f000 f979 	bl	8000ac4 <lcd_clear>
					lcd_set_cursor(0,3);
 80007d2:	2103      	movs	r1, #3
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f958 	bl	8000a8a <lcd_set_cursor>
					lcd_Send_String("SYNTAX ERROR");
 80007da:	482a      	ldr	r0, [pc, #168]	; (8000884 <check_data+0x2a4>)
 80007dc:	f000 f979 	bl	8000ad2 <lcd_Send_String>
 80007e0:	e00b      	b.n	80007fa <check_data+0x21a>
					perform_calculation(first_input, second_input, operator);
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <check_data+0x298>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <check_data+0x294>)
 80007e8:	6811      	ldr	r1, [r2, #0]
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <check_data+0x29c>)
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fe60 	bl	80004b4 <perform_calculation>
					HAL_Delay(10);
 80007f4:	200a      	movs	r0, #10
 80007f6:	f000 fb91 	bl	8000f1c <HAL_Delay>
				status.cal_complete = 1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <check_data+0x290>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	709a      	strb	r2, [r3, #2]
				break;
 8000800:	e032      	b.n	8000868 <check_data+0x288>
				lcd_clear();
 8000802:	f000 f95f 	bl	8000ac4 <lcd_clear>
				if(status.input2 && (second_input == 0))
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <check_data+0x290>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <check_data+0x244>
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <check_data+0x294>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d106      	bne.n	8000824 <check_data+0x244>
					status.input2 = false;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <check_data+0x290>)
 8000818:	2200      	movs	r2, #0
 800081a:	705a      	strb	r2, [r3, #1]
					operator = 0;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <check_data+0x29c>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e01d      	b.n	8000860 <check_data+0x280>
				else if(status.input2 && second_input != 0)
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <check_data+0x290>)
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00c      	beq.n	8000846 <check_data+0x266>
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <check_data+0x294>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <check_data+0x266>
					second_input = second_input/10;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <check_data+0x294>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <check_data+0x2a8>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <check_data+0x294>)
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e00c      	b.n	8000860 <check_data+0x280>
					if(first_input != 0)
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <check_data+0x298>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <check_data+0x286>
						first_input = first_input/10;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <check_data+0x298>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <check_data+0x2a8>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <check_data+0x298>)
 800085c:	6013      	str	r3, [r2, #0]
				break;
 800085e:	e002      	b.n	8000866 <check_data+0x286>
 8000860:	e001      	b.n	8000866 <check_data+0x286>
				break;
 8000862:	bf00      	nop
 8000864:	e000      	b.n	8000868 <check_data+0x288>
				break;
 8000866:	bf00      	nop
		}
	}


}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000028 	.word	0x20000028
 8000874:	20000034 	.word	0x20000034
 8000878:	20000030 	.word	0x20000030
 800087c:	2000003c 	.word	0x2000003c
 8000880:	20000038 	.word	0x20000038
 8000884:	08001d64 	.word	0x08001d64
 8000888:	cccccccd 	.word	0xcccccccd

0800088c <display_data>:

void display_data()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	lcd_set_cursor(0,0);
 8000890:	2100      	movs	r1, #0
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f8f9 	bl	8000a8a <lcd_set_cursor>
	if(first_input == 0 && status.cal_complete == 0)
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <display_data+0x84>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <display_data+0x28>
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <display_data+0x88>)
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	f083 0301 	eor.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <display_data+0x28>
		lcd_send_data('0');
 80008ae:	2030      	movs	r0, #48	; 0x30
 80008b0:	f000 f8ba 	bl	8000a28 <lcd_send_data>
	display_number(first_input);
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <display_data+0x84>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe49 	bl	8000550 <display_number>
	if(status.input2)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <display_data+0x88>)
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d009      	beq.n	80008da <display_data+0x4e>
	{
		lcd_send_data(operator);
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <display_data+0x8c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f8ac 	bl	8000a28 <lcd_send_data>
		display_number(second_input);
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <display_data+0x90>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe3b 	bl	8000550 <display_number>
	}
	if(status.cal_complete)
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <display_data+0x88>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d013      	beq.n	800090a <display_data+0x7e>
	{
		lcd_set_cursor(1, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 f8d0 	bl	8000a8a <lcd_set_cursor>
		lcd_send_data('=');
 80008ea:	203d      	movs	r0, #61	; 0x3d
 80008ec:	f000 f89c 	bl	8000a28 <lcd_send_data>

		if(result == 0)
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <display_data+0x94>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <display_data+0x74>
			lcd_send_data('0');
 80008f8:	2030      	movs	r0, #48	; 0x30
 80008fa:	f000 f895 	bl	8000a28 <lcd_send_data>
		else
			display_number(result);
	}
}
 80008fe:	e004      	b.n	800090a <display_data+0x7e>
			display_number(result);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <display_data+0x94>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe23 	bl	8000550 <display_number>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000030 	.word	0x20000030
 8000914:	20000028 	.word	0x20000028
 8000918:	2000003c 	.word	0x2000003c
 800091c:	20000034 	.word	0x20000034
 8000920:	20000038 	.word	0x20000038

08000924 <lcd_send_4bit>:
	HAL_Delay(100);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
}
*/
void lcd_send_4bit(int a, int data)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, a);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	2104      	movs	r1, #4
 8000936:	483b      	ldr	r0, [pc, #236]	; (8000a24 <lcd_send_4bit+0x100>)
 8000938:	f000 fdb5 	bl	80014a6 <HAL_GPIO_WritePin>
	/*higher nibble send*/
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data&0x80));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	4836      	ldr	r0, [pc, #216]	; (8000a24 <lcd_send_4bit+0x100>)
 800094c:	f000 fdab 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data&0x40));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4831      	ldr	r0, [pc, #196]	; (8000a24 <lcd_send_4bit+0x100>)
 8000960:	f000 fda1 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data&0x20));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	2120      	movs	r1, #32
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <lcd_send_4bit+0x100>)
 8000974:	f000 fd97 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data&0x10));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	2110      	movs	r1, #16
 8000986:	4827      	ldr	r0, [pc, #156]	; (8000a24 <lcd_send_4bit+0x100>)
 8000988:	f000 fd8d 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <lcd_send_4bit+0x100>)
 8000992:	f000 fd88 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000996:	200a      	movs	r0, #10
 8000998:	f000 fac0 	bl	8000f1c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	4820      	ldr	r0, [pc, #128]	; (8000a24 <lcd_send_4bit+0x100>)
 80009a2:	f000 fd80 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f000 fab8 	bl	8000f1c <HAL_Delay>
	/*send lower nibble*/
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data&0x08));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <lcd_send_4bit+0x100>)
 80009bc:	f000 fd73 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data&0x04));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <lcd_send_4bit+0x100>)
 80009d0:	f000 fd69 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data&0x02));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	2120      	movs	r1, #32
 80009e2:	4810      	ldr	r0, [pc, #64]	; (8000a24 <lcd_send_4bit+0x100>)
 80009e4:	f000 fd5f 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data&0x01));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	2110      	movs	r1, #16
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <lcd_send_4bit+0x100>)
 80009f8:	f000 fd55 	bl	80014a6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2108      	movs	r1, #8
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <lcd_send_4bit+0x100>)
 8000a02:	f000 fd50 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f000 fa88 	bl	8000f1c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <lcd_send_4bit+0x100>)
 8000a12:	f000 fd48 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f000 fa80 	bl	8000f1c <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40010800 	.word	0x40010800

08000a28 <lcd_send_data>:
void lcd_send_data(int data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	lcd_send_4bit(1, data);
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff ff76 	bl	8000924 <lcd_send_4bit>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <lcd_send_cmd>:
void lcd_send_cmd(int cmd)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	lcd_send_4bit(0, cmd);
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ff6a 	bl	8000924 <lcd_send_4bit>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <lcd_4bit_init>:
	lcd_send_cmd (0x06); //cursor increment
	lcd_send_cmd(0x0c); //display on cursor off
}

void lcd_4bit_init()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x02); //  4bit mode
	lcd_send_cmd(0x80); //force to begining
	lcd_send_cmd(0x06); //auto increement
	lcd_send_cmd(0x01); //clear lcd*/

	HAL_Delay(10);
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f000 fa5d 	bl	8000f1c <HAL_Delay>
		lcd_send_cmd (0x02); //4bit mode
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff ffec 	bl	8000a40 <lcd_send_cmd>
		lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a68:	2028      	movs	r0, #40	; 0x28
 8000a6a:	f7ff ffe9 	bl	8000a40 <lcd_send_cmd>
		lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f7ff ffe6 	bl	8000a40 <lcd_send_cmd>
		lcd_send_cmd (0x01);  // clear display
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff ffe3 	bl	8000a40 <lcd_send_cmd>
		lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a7a:	2006      	movs	r0, #6
 8000a7c:	f7ff ffe0 	bl	8000a40 <lcd_send_cmd>
		lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a80:	200c      	movs	r0, #12
 8000a82:	f7ff ffdd 	bl	8000a40 <lcd_send_cmd>

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <lcd_set_cursor>:

void lcd_set_cursor(int row, int col)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	switch (row) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <lcd_set_cursor+0x18>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d005      	beq.n	8000aac <lcd_set_cursor+0x22>
			break;
		case 1:
			col |= 0xC0;
			break;
		default:
			break;
 8000aa0:	e009      	b.n	8000ab6 <lcd_set_cursor+0x2c>
			col |= 0x80;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	603b      	str	r3, [r7, #0]
			break;
 8000aaa:	e004      	b.n	8000ab6 <lcd_set_cursor+0x2c>
			col |= 0xC0;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ab2:	603b      	str	r3, [r7, #0]
			break;
 8000ab4:	bf00      	nop
	}
	lcd_send_cmd(col);
 8000ab6:	6838      	ldr	r0, [r7, #0]
 8000ab8:	f7ff ffc2 	bl	8000a40 <lcd_send_cmd>

}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <lcd_clear>:

void lcd_clear()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff ffb9 	bl	8000a40 <lcd_send_cmd>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <lcd_Send_String>:

void lcd_Send_String(const char *str)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000ada:	e007      	b.n	8000aec <lcd_Send_String+0x1a>
	{
		lcd_send_data(*str);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ffa1 	bl	8000a28 <lcd_send_data>
		str++;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f3      	bne.n	8000adc <lcd_Send_String+0xa>
	}

}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f000 f9a7 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f86d 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f000 f8a7 	bl	8000c60 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 // HAL_GPIO_WritePin(lcd_power_GPIO_Port, lcd_power_Pin, SET);
  lcd_4bit_init();
 8000b12:	f7ff ffa1 	bl	8000a58 <lcd_4bit_init>
  while (1)
  {
    /* USER CODE END WHILE */
	//  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	//  HAL_Delay(100);
	  char data = key_map();
 8000b16:	f7ff fb19 	bl	800014c <key_map>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	 	  if( status.cal_complete == 1 && status.data_available ==1)
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <main+0xac>)
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d036      	beq.n	8000b94 <main+0x94>
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <main+0xac>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d032      	beq.n	8000b94 <main+0x94>
	 	  {
	 		  status.cal_complete = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <main+0xac>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	709a      	strb	r2, [r3, #2]
	 		  status.negative_result = 0;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <main+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	70da      	strb	r2, [r3, #3]
	 		  lcd_clear();
 8000b3a:	f7ff ffc3 	bl	8000ac4 <lcd_clear>
	 		  lcd_set_cursor(0,0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ffa2 	bl	8000a8a <lcd_set_cursor>
	 		  if((data>='0' && data<='9')||data == 'C')
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b2f      	cmp	r3, #47	; 0x2f
 8000b4a:	d902      	bls.n	8000b52 <main+0x52>
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b39      	cmp	r3, #57	; 0x39
 8000b50:	d902      	bls.n	8000b58 <main+0x58>
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b43      	cmp	r3, #67	; 0x43
 8000b56:	d10d      	bne.n	8000b74 <main+0x74>
	 		  {
	 			  status.input2 = 0;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <main+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	705a      	strb	r2, [r3, #1]
	 			  first_input = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <main+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
	 			  second_input = 0;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <main+0xb4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
	 			  check_data(data);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd37 	bl	80005e0 <check_data>
 8000b72:	e00c      	b.n	8000b8e <main+0x8e>
	 			 // lcd_send_data('I');
	 		  }
	 		  else
	 		  {
	 			  first_input = result;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <main+0xb8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <main+0xb0>)
 8000b7a:	6013      	str	r3, [r2, #0]
	 			  second_input = 0;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <main+0xb4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	 			  operator = data;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <main+0xbc>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	7013      	strb	r3, [r2, #0]
	 			  //display_data();
	 			  lcd_send_data('E');
 8000b88:	2045      	movs	r0, #69	; 0x45
 8000b8a:	f7ff ff4d 	bl	8000a28 <lcd_send_data>
	 		  }
	 		  //lcd_clear();
	 		  //lcd_set_cursor(0,0);
	 		 // lcd_send_data(data);
	 		 // check_data(data);
	 		  display_data();
 8000b8e:	f7ff fe7d 	bl	800088c <display_data>
 8000b92:	e009      	b.n	8000ba8 <main+0xa8>
	 	  }

	 	  else if( status.data_available ==1)
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <main+0xac>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0bc      	beq.n	8000b16 <main+0x16>
	 	  {
	 		  check_data(data);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd1e 	bl	80005e0 <check_data>
	 		  display_data();
 8000ba4:	f7ff fe72 	bl	800088c <display_data>
  {
 8000ba8:	e7b5      	b.n	8000b16 <main+0x16>
 8000baa:	bf00      	nop
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	20000030 	.word	0x20000030
 8000bb4:	20000034 	.word	0x20000034
 8000bb8:	20000038 	.word	0x20000038
 8000bbc:	2000003c 	.word	0x2000003c

08000bc0 <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sleep_Pin)
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bd0:	d104      	bne.n	8000bdc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000bd8:	f000 fc7d 	bl	80014d6 <HAL_GPIO_TogglePin>
			//lcd_send_cmd(0x08);
		//else
			//lcd_send_cmd(0x0C);
	}

}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010800 	.word	0x40010800

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b090      	sub	sp, #64	; 0x40
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f87c 	bl	8001cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c12:	2310      	movs	r3, #16
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fc8a 	bl	8001538 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f891 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fef8 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f87d 	bl	8000d50 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3740      	adds	r7, #64	; 0x40
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin|D4_Pin|D5_Pin
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_GPIO_Init+0xe4>)
 8000cac:	f000 fbfb 	bl	80014a6 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|R4_Pin|R3_Pin
                          |R2_Pin|R1_Pin|led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lcd_power_GPIO_Port, lcd_power_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000cb6:	f000 fbf6 	bl	80014a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin EN_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin R4_Pin R3_Pin
                           R2_Pin R1_Pin led_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|D4_Pin|D5_Pin
 8000cba:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8000cbe:	60bb      	str	r3, [r7, #8]
                          |D6_Pin|D7_Pin|R4_Pin|R3_Pin
                          |R2_Pin|R1_Pin|led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_GPIO_Init+0xe4>)
 8000cd4:	f000 fa54 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 8000cd8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000cee:	f000 fa47 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : sleep_Pin */
  GPIO_InitStruct.Pin = sleep_Pin;
 8000cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_GPIO_Init+0xec>)
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sleep_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0xe4>)
 8000d08:	f000 fa3a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_power_Pin */
  GPIO_InitStruct.Pin = lcd_power_Pin;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(lcd_power_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000d24:	f000 fa2c 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	2028      	movs	r0, #40	; 0x28
 8000d2e:	f000 f9f0 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d32:	2028      	movs	r0, #40	; 0x28
 8000d34:	f000 fa09 	bl	800114a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	10110000 	.word	0x10110000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_MspInit+0x40>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_MspInit+0x40>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_MspInit+0x40>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_MspInit+0x40>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_MspInit+0x40>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_MspInit+0x40>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f87d 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sleep_Pin);
 8000df2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000df6:	f000 fb87 	bl	8001508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff fff7 	bl	8000dfe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e12:	490c      	ldr	r1, [pc, #48]	; (8000e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e14:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e28:	4c09      	ldr	r4, [pc, #36]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f000 ff65 	bl	8001d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff fe61 	bl	8000b00 <main>
  bx lr
 8000e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08001da0 	.word	0x08001da0
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	20000044 	.word	0x20000044

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x28>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f947 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff ff72 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f95f 	bl	8001166 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f927 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000040 	.word	0x20000040

08000f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000040 	.word	0x20000040

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff0 	bl	8000f08 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffe0 	bl	8000f08 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <__NVIC_EnableIRQ+0x34>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2d 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff42 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff35 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e161      	b.n	8001458 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8150 	bne.w	8001452 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a97      	ldr	r2, [pc, #604]	; (8001414 <HAL_GPIO_Init+0x294>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d05e      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011bc:	4a95      	ldr	r2, [pc, #596]	; (8001414 <HAL_GPIO_Init+0x294>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d875      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011c2:	4a95      	ldr	r2, [pc, #596]	; (8001418 <HAL_GPIO_Init+0x298>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d058      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011c8:	4a93      	ldr	r2, [pc, #588]	; (8001418 <HAL_GPIO_Init+0x298>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d86f      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011ce:	4a93      	ldr	r2, [pc, #588]	; (800141c <HAL_GPIO_Init+0x29c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d052      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011d4:	4a91      	ldr	r2, [pc, #580]	; (800141c <HAL_GPIO_Init+0x29c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d869      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011da:	4a91      	ldr	r2, [pc, #580]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d04c      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011e0:	4a8f      	ldr	r2, [pc, #572]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d863      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011e6:	4a8f      	ldr	r2, [pc, #572]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d046      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011ec:	4a8d      	ldr	r2, [pc, #564]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d85d      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011f2:	2b12      	cmp	r3, #18
 80011f4:	d82a      	bhi.n	800124c <HAL_GPIO_Init+0xcc>
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d859      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <HAL_GPIO_Init+0x80>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	0800127b 	.word	0x0800127b
 8001204:	08001255 	.word	0x08001255
 8001208:	08001267 	.word	0x08001267
 800120c:	080012a9 	.word	0x080012a9
 8001210:	080012af 	.word	0x080012af
 8001214:	080012af 	.word	0x080012af
 8001218:	080012af 	.word	0x080012af
 800121c:	080012af 	.word	0x080012af
 8001220:	080012af 	.word	0x080012af
 8001224:	080012af 	.word	0x080012af
 8001228:	080012af 	.word	0x080012af
 800122c:	080012af 	.word	0x080012af
 8001230:	080012af 	.word	0x080012af
 8001234:	080012af 	.word	0x080012af
 8001238:	080012af 	.word	0x080012af
 800123c:	080012af 	.word	0x080012af
 8001240:	080012af 	.word	0x080012af
 8001244:	0800125d 	.word	0x0800125d
 8001248:	08001271 	.word	0x08001271
 800124c:	4a76      	ldr	r2, [pc, #472]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001252:	e02c      	b.n	80012ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e029      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	3304      	adds	r3, #4
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e024      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	3308      	adds	r3, #8
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e01f      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	330c      	adds	r3, #12
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e01a      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001282:	2304      	movs	r3, #4
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e013      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	611a      	str	r2, [r3, #16]
          break;
 800129a:	e009      	b.n	80012b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	615a      	str	r2, [r3, #20]
          break;
 80012a6:	e003      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          break;
 80012ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d801      	bhi.n	80012ba <HAL_GPIO_Init+0x13a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_Init+0x13e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d802      	bhi.n	80012cc <HAL_GPIO_Init+0x14c>
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x152>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	3b08      	subs	r3, #8
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	210f      	movs	r1, #15
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80a9 	beq.w	8001452 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <HAL_GPIO_Init+0x2ac>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_GPIO_Init+0x2ac>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_GPIO_Init+0x2ac>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001318:	4a45      	ldr	r2, [pc, #276]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_GPIO_Init+0x2b4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1e0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1dc>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3b      	ldr	r2, [pc, #236]	; (800143c <HAL_GPIO_Init+0x2bc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1d8>
 8001354:	2302      	movs	r3, #2
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1e2>
 8001358:	2303      	movs	r3, #3
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1e2>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1e2>
 8001360:	2300      	movs	r3, #0
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001372:	492f      	ldr	r1, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	492b      	ldr	r1, [pc, #172]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4927      	ldr	r1, [pc, #156]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	4921      	ldr	r1, [pc, #132]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	491d      	ldr	r1, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4917      	ldr	r1, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01f      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	490d      	ldr	r1, [pc, #52]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e01f      	b.n	8001452 <HAL_GPIO_Init+0x2d2>
 8001412:	bf00      	nop
 8001414:	10320000 	.word	0x10320000
 8001418:	10310000 	.word	0x10310000
 800141c:	10220000 	.word	0x10220000
 8001420:	10210000 	.word	0x10210000
 8001424:	10120000 	.word	0x10120000
 8001428:	10110000 	.word	0x10110000
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40011000 	.word	0x40011000
 8001440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 800144e:	4013      	ands	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae96 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	400b      	ands	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb4a 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e272      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001564:	4b8f      	ldr	r3, [pc, #572]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
 8001570:	4b8c      	ldr	r3, [pc, #560]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_RCC_OscConfig+0x12c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d168      	bne.n	8001664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e24c      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x76>
 80015a0:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e02e      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xbc>
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015f4:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fc78 	bl	8000f08 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc74 	bl	8000f08 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e200      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xe4>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc64 	bl	8000f08 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fc60 	bl	8000f08 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ec      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x10c>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c0      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4939      	ldr	r1, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fc19 	bl	8000f08 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc15 	bl	8000f08 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fbf8 	bl	8000f08 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fbf4 	bl	8000f08 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e180      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03a      	beq.n	80017bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fbd8 	bl	8000f08 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fbd4 	bl	8000f08 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e160      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fa9c 	bl	8001cb8 <RCC_Delay>
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fbbe 	bl	8000f08 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fbba 	bl	8000f08 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d908      	bls.n	80017b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e146      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420000 	.word	0x42420000
 80017ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e9      	bne.n	8001790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a6 	beq.w	8001916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a87      	ldr	r2, [pc, #540]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b85      	ldr	r3, [pc, #532]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d118      	bne.n	8001834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180e:	f7ff fb7b 	bl	8000f08 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff fb77 	bl	8000f08 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e103      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x312>
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x334>
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a69      	ldr	r2, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	e01c      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x356>
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb2b 	bl	8000f08 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff fb27 	bl	8000f08 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0b1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ee      	beq.n	80018b6 <HAL_RCC_OscConfig+0x37e>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fb15 	bl	8000f08 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fb11 	bl	8000f08 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e09b      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d105      	bne.n	8001916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d061      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d146      	bne.n	80019c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fae5 	bl	8000f08 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fae1 	bl	8000f08 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e06d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a19      	ldr	r1, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	430b      	orrs	r3, r1
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fab5 	bl	8000f08 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fab1 	bl	8000f08 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46a>
 80019c0:	e035      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fa9e 	bl	8000f08 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fa9a 	bl	8000f08 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x498>
 80019ee:	e01e      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e019      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x500>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0d0      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4965      	ldr	r1, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d040      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d115      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e073      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06b      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f9ec 	bl	8000f08 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f9e8 	bl	8000f08 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e053      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d210      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	490a      	ldr	r1, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1cc>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f94a 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08001d74 	.word	0x08001d74
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3e:	e027      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	e027      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0c5b      	lsrs	r3, r3, #17
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c72:	fb03 f202 	mul.w	r2, r3, r2
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e004      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	613b      	str	r3, [r7, #16]
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c92:	613b      	str	r3, [r7, #16]
      break;
 8001c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c96:	693b      	ldr	r3, [r7, #16]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	007a1200 	.word	0x007a1200
 8001cac:	08001d84 	.word	0x08001d84
 8001cb0:	08001d94 	.word	0x08001d94
 8001cb4:	003d0900 	.word	0x003d0900

08001cb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <RCC_Delay+0x34>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <RCC_Delay+0x38>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0a5b      	lsrs	r3, r3, #9
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd4:	bf00      	nop
  }
  while (Delay --);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	60fa      	str	r2, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f9      	bne.n	8001cd4 <RCC_Delay+0x1c>
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	10624dd3 	.word	0x10624dd3

08001cf4 <memset>:
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4402      	add	r2, r0
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <memset+0xa>
 8001cfc:	4770      	bx	lr
 8001cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001d02:	e7f9      	b.n	8001cf8 <memset+0x4>

08001d04 <__libc_init_array>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	2600      	movs	r6, #0
 8001d08:	4d0c      	ldr	r5, [pc, #48]	; (8001d3c <__libc_init_array+0x38>)
 8001d0a:	4c0d      	ldr	r4, [pc, #52]	; (8001d40 <__libc_init_array+0x3c>)
 8001d0c:	1b64      	subs	r4, r4, r5
 8001d0e:	10a4      	asrs	r4, r4, #2
 8001d10:	42a6      	cmp	r6, r4
 8001d12:	d109      	bne.n	8001d28 <__libc_init_array+0x24>
 8001d14:	f000 f81a 	bl	8001d4c <_init>
 8001d18:	2600      	movs	r6, #0
 8001d1a:	4d0a      	ldr	r5, [pc, #40]	; (8001d44 <__libc_init_array+0x40>)
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	; (8001d48 <__libc_init_array+0x44>)
 8001d1e:	1b64      	subs	r4, r4, r5
 8001d20:	10a4      	asrs	r4, r4, #2
 8001d22:	42a6      	cmp	r6, r4
 8001d24:	d105      	bne.n	8001d32 <__libc_init_array+0x2e>
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2c:	4798      	blx	r3
 8001d2e:	3601      	adds	r6, #1
 8001d30:	e7ee      	b.n	8001d10 <__libc_init_array+0xc>
 8001d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d36:	4798      	blx	r3
 8001d38:	3601      	adds	r6, #1
 8001d3a:	e7f2      	b.n	8001d22 <__libc_init_array+0x1e>
 8001d3c:	08001d98 	.word	0x08001d98
 8001d40:	08001d98 	.word	0x08001d98
 8001d44:	08001d98 	.word	0x08001d98
 8001d48:	08001d9c 	.word	0x08001d9c

08001d4c <_init>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	bf00      	nop
 8001d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d52:	bc08      	pop	{r3}
 8001d54:	469e      	mov	lr, r3
 8001d56:	4770      	bx	lr

08001d58 <_fini>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr
